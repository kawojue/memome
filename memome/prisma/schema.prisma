datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Users {
    id             String     @id @default(auto()) @map("_id") @db.ObjectId
    provider_id    String?    @unique
    username       String     @unique
    email          String     @unique
    password       String?
    totp           String?
    totp_expiry    Int?
    email_verified Boolean    @default(false)
    created_at     DateTime   @default(now())
    updated_at     DateTime   @updatedAt
    last_login     String?
    last_logout    String?
    ip_address     String?
    refresh_token  String?
    auth_method    AuthMethod
    Profile        Profiles?
    Account        Accounts?
    Settings       Settings?
    Polls          Poll[]
    Votes          Vote[]
    Messages       Message[]
}

model Profiles {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    avatar     File?
    views      Int    @default(0)
    msg_point  Float  @default(0.75)
    poll_point Float  @default(0.75)
    bio        String @default("What's on your mind?")
    user       Users  @relation(fields: [userId], references: [id])
    userId     String @unique @db.ObjectId
}

model Accounts {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    disabled Boolean @default(false)
    verified Boolean @default(false)
    user     Users   @relation(fields: [userId], references: [id])
    userId   String  @unique @db.ObjectId
}

model Settings {
    id           String       @id @default(auto()) @map("_id") @db.ObjectId
    allow_texts  Boolean      @default(true)
    allow_files  Boolean      @default(true)
    show_levels  Boolean      @default(true)
    gen_msg_type QuestionType @default(normal)
    user         Users        @relation(fields: [userId], references: [id])
    userId       String       @unique @db.ObjectId
}

model Message {
    id      String  @id @default(auto()) @map("_id") @db.ObjectId
    texts   String?
    files   File[]
    date    String
    private Boolean @default(true)
    user    Users   @relation(fields: [userId], references: [id])
    userId  String  @unique @db.ObjectId
}

model Poll {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    date        String
    title       String?
    expiry      String?
    files       File[]
    options     Option[]
    active      Boolean  @default(true)
    private     Boolean  @default(false)
    totalVotes  Int      @default(0)
    views       Int      @default(0)
    createdBy   Users    @relation(fields: [createdById], references: [id])
    createdById String   @unique @db.ObjectId
    votes       Vote[]
}

model Option {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    texts      String
    totalVotes Int    @default(0)
    votes      Vote[]
    poll       Poll   @relation(fields: [pollId], references: [id])
    pollId     String @unique @db.ObjectId
}

model Vote {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    userId   String @db.ObjectId
    user     Users  @relation(fields: [userId], references: [id])
    pollId   String @db.ObjectId
    poll     Poll   @relation(fields: [pollId], references: [id])
    optionId String @unique @db.ObjectId
    option   Option @relation(fields: [optionId], references: [id])

    @@unique([userId, pollId])
}

type File {
    idx  String  @default(uuid())
    url  String
    path String
    type String?
}

enum AuthMethod {
    google
    github
    local
}

enum QuestionType {
    all
    nasty
    normal
    relationship
}
